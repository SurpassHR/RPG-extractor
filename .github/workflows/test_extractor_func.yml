name: Test extractor function
on:
  # 触发方式: 手动触发和推送 mater 分支时触发
  workflow_dispatch:
  push:
    branches: [master]

env:
  # slice repo name from repo full path
  REPO_NAME: "$(echo ${{ github.repository }} | cut -d'/' -f2)"
  REPO_FOLDER: "${{ github.workspace }}"

jobs:
  download_from_gdrive:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install gdrive tool
      working-directory: ./
      run: |
        curl -L -o gdrive.tar.gz https://github.com/glotlabs/gdrive/releases/download/3.9.1/gdrive_linux-x64.tar.gz
        tar -xzf gdrive.tar.gz
        sudo install gdrive /usr/local/bin/gdrive

    - name: Install python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Prepare environment
      working-directory: ${{ env.REPO_FOLDER }}
      run: pip install -r requirements.txt

    - name: Setup service account credentials
      working-directory: ./
      run: |
        dirName=${{ secrets.GDRIVE_SERVICE_ACCOUNT_NAME }}
        mkdir ${dirName}
        echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT_SECRET }}" | base64 --decode > ${dirName}/secret.json
        echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT_TOKENS }}" | base64 --decode > ${dirName}/tokens.json
        tar -cf gdrive_export.tar ${dirName}
        rm -rf ${dirName}

    - name: Authenticate with Google Drive
      working-directory: ./
      run: |
        gdrive account import ./gdrive_export.tar

    - name: Create folders
      working-directory: ./
      run: |
        mkdir -p ${{ runner.workspace }}/gdrive_data
        mkdir -p ${{ runner.workspace }}/extract_data

    # - name: Download files list
    #   run: |
    #     FILE_IDS=()
    #     for FILE_ID in "${FILE_IDS[@]}"
    #     do
    #       echo "Downloading $FILE_ID ..."
    #       gdrive files download "$FILE_ID" --destination ${{ env.DOWNLOAD_FOLDER }}
    #     done

    # Download folder
    # - name: Download folder from Google Drive
    #   run: |
    #     FOLDER_ID="1df-sCx8eXkaxV1fiUoos6shYxBg0H_Do"
    #     gdrive files download --recursive --destination ${{ env.DOWNLOAD_FOLDER }} "$FOLDER_ID"

    # Download compressed data and extract
    - name: Download file from Google Drive
      id: download_and_extract
      working-directory: ./
      run: |
        FILE_INFO=(
          "14WIwqL2D0HfRA49lf_Q6VzMniS9Q14Kr:Curse of pleasure v0.9.tar.gz"
        )
        EXTRACTED_FOLDERS=()
        DOWNLOAD_DIR="${{ runner.workspace }}/gdrive_data"

        ls /home/runner/work/RPG-extractor/gdrive_data
        # ls /home/runner/work/RPG-extractor/gdrive_data/Curse\ of\ pleasure\ v0.9

        for item in "${FILE_INFO[@]}"
        do
          FILE_ID="${item%%:*}"
          FILE_NAME="${item#*:}"
          GAME_NAME="${FILE_NAME%.tar.gz}"
          COMPRESSED_FILE_PATH="${DOWNLOAD_DIR}/${FILE_NAME}"
          UNCOMPRESS_FOLDER_PATH="${DOWNLOAD_DIR}/${FILE_NAME}"
          UNCOMPRESS_FOLDER_PATH="${UNCOMPRESS_FOLDER_PATH%.tar.gz}"
          echo "FILE_ID: ${FILE_ID}, FILE_NAME: ${FILE_NAME}， GAME_NAME: ${GAME_NAME}"

          gdrive files download "${FILE_ID}" --destination "${DOWNLOAD_DIR}"

          echo "Extracting ${FILE_NAME} to ${DOWNLOAD_DIR}..."
          mkdir -p "${UNCOMPRESS_FOLDER_PATH}"
          tar -xf "${COMPRESSED_FILE_PATH}" -C "${UNCOMPRESS_FOLDER_PATH}"
          echo "Game \"${GAME_NAME}\" full path: ${UNCOMPRESS_FOLDER_PATH}"

          EXTRACTED_FOLDERS+=("${UNCOMPRESS_FOLDER_PATH}")
          echo "EXTRACTED_FOLDERS: ${EXTRACTED_FOLDERS}"
        done

        echo "extracted_folder=${EXTRACTED_FOLDERS[*]}" >> ${GITHUB_OUTPUT}

    - name: Run test
      working-directory: ${{ env.REPO_FOLDER }}
      run: |
        extract_folder='${{ steps.download_and_extract.outputs.extracted_folder }}'
        # echo -e "${{ steps.download_and_extract.outputs.extracted_folder }}"
        # echo -e "${extract_folder}"
        for folder in "${extract_folder[@]}"
        do
          game_name=$(basename "${folder}")
          game_name="${game_name%.tar.gz}"
          echo "Processing game \"${game_name}\"..."
          python run.py --dataFolder "${folder}" --outputFolder "${{ runner.workspace }}/extract_data" --title "${game_name}"
        done

    - name: Package extracted data
      working-directory: ${{ runner.workspace }}/extract_data
      run: |
        # Make sure there are directories to zip
        if ls -d */ > /dev/null 2>&1; then
          for dir in */; do
            dirname="${dir%/}"
            echo "Zipping ${dirname}..."
            zip -r "${dirname}.zip" "${dirname}"
          done
        else
          echo "No directories found to zip."
        fi

    - name: Create release and upload assets
      # create release only when pushes a tag
      if: startsWith(github.ref, 'refs/tags')
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ runner.workspace }}/extract_data/*.zip

    - name: Upload extracted data as artifact
      uses: actions/upload-artifact@v4 # Using the latest recommended version
      with:
        name: extracted-zip-files # The name of the artifact. This should be unique per workflow run if you upload multiple artifacts.
        path: ${{ runner.workspace }}/extract_data/*.zip # The path to the files or directories to upload. Wildcards are supported.