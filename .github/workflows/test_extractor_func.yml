name: Test extractor function
on:
  # 触发方式: 手动触发和推送 mater 分支时触发
  workflow_dispatch:
  push:
    branches: [master]

env:
  # slice repo name from repo full path
  REPO_NAME: "$(echo ${{ github.repository }} | cut -d'/' -f2)"
  REPO_FOLDER: "${{ github.workspace }}"

jobs:
  download_from_gdrive:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Install gdrive tool
      working-directory: ./
      run: |
        curl -L -o gdrive.tar.gz https://github.com/glotlabs/gdrive/releases/download/3.9.1/gdrive_linux-x64.tar.gz
        tar -xzf gdrive.tar.gz
        sudo install gdrive /usr/local/bin/gdrive

    - name: Install python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Prepare environment
      working-directory: ${{ env.REPO_FOLDER }}
      run: pip install -r requirements.txt

    - name: Setup service account credentials
      working-directory: ./
      run: |
        dirName=${{ secrets.GDRIVE_SERVICE_ACCOUNT_NAME }}
        mkdir ${dirName}
        echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT_SECRET }}" | base64 --decode > ${dirName}/secret.json
        echo "${{ secrets.GDRIVE_SERVICE_ACCOUNT_TOKENS }}" | base64 --decode > ${dirName}/tokens.json
        tar -cf gdrive_export.tar ${dirName}
        rm -rf ${dirName}

    - name: Authenticate with Google Drive
      working-directory: ./
      run: |
        gdrive account import ./gdrive_export.tar

    - name: Create folders
      working-directory: ./
      run: |
        mkdir -p ${{ runner.workspace }}/gdrive_data
        mkdir -p ${{ runner.workspace }}/extract_data

    # - name: Download files list
    #   run: |
    #     FILE_IDS=()
    #     for FILE_ID in "${FILE_IDS[@]}"
    #     do
    #       echo "Downloading $FILE_ID ..."
    #       gdrive files download "$FILE_ID" --destination ${{ env.DOWNLOAD_FOLDER }}
    #     done

    # Download folder
    # - name: Download folder from Google Drive
    #   run: |
    #     FOLDER_ID="1df-sCx8eXkaxV1fiUoos6shYxBg0H_Do"
    #     gdrive files download --recursive --destination ${{ env.DOWNLOAD_FOLDER }} "$FOLDER_ID"

    # Download compressed data and extract
    - name: Download file from Google Drive
      id: download_and_extract
      working-directory: ./
      run: |
        FILE_INFO=(
          "14WIwqL2D0HfRA49lf_Q6VzMniS9Q14Kr:Curse of pleasure v0.9.tar.gz"
        )
        EXTRACTED_FOLDERS=()
        DOWNLOAD_DIR="${{ runner.workspace }}/gdrive_data"

        for item in "${FILE_INFO[@]}"
        do
          FILE_ID="${item%%:*}"
          FILE_NAME="${item#*:}"
          GAME_NAME="${FILE_NAME%.tar.gz}"
          COMPRESSED_FILE_PATH="${DOWNLOAD_DIR}/${FILE_NAME}"
          UNCOMPRESS_FOLDER_PATH="${DOWNLOAD_DIR}/${FILE_NAME}"
          UNCOMPRESS_FOLDER_PATH="${UNCOMPRESS_FOLDER_PATH%.tar.gz}"
          echo "FILE_ID: ${FILE_ID}, FILE_NAME: ${FILE_NAME}， GAME_NAME: ${GAME_NAME}"

          gdrive files download "${FILE_ID}" --destination "${DOWNLOAD_DIR}"

          echo "Extracting ${FILE_NAME} to ${DOWNLOAD_DIR}..."
          mkdir -p "${UNCOMPRESS_FOLDER_PATH}"
          tar -xf "${COMPRESSED_FILE_PATH}" -C "${UNCOMPRESS_FOLDER_PATH}"
          echo "Game \"${GAME_NAME}\" full path: ${UNCOMPRESS_FOLDER_PATH}"

          EXTRACTED_FOLDERS+=("${UNCOMPRESS_FOLDER_PATH}")
          echo "EXTRACTED_FOLDERS: ${EXTRACTED_FOLDERS}"
        done

        echo "extracted_folder=${EXTRACTED_FOLDERS[*]}" >> ${GITHUB_OUTPUT}

    - name: Run test
      working-directory: ${{ env.REPO_FOLDER }}
      run: |
        extract_folder='${{ steps.download_and_extract.outputs.extracted_folder }}'
        # echo -e "${{ steps.download_and_extract.outputs.extracted_folder }}"
        # echo -e "${extract_folder}"
        for folder in "${extract_folder[@]}"
        do
          game_name=$(basename "${folder}")
          game_name="${game_name%.tar.gz}"
          echo "Processing game \"${game_name}\"..."
          python run.py --dataFolder "${folder}" --outputFolder "${{ runner.workspace }}/extract_data" --title "${game_name}"
        done

    - name: Package extracted data
      working-directory: ${{ runner.workspace }}/extract_data
      run: |
        # Make sure there are directories to zip
        if ls -d */ > /dev/null 2>&1; then
          for dir in */; do
            dirname="${dir%/}"
            echo "Zipping ${dirname}..."
            zip -r "${dirname}.zip" "${dirname}"
          done
        else
          echo "No directories found to zip."
        fi

    - name: Create release and upload assets
      # create release only when pushes a tag
      if: startsWith(github.ref, 'refs/tags')
      uses: softprops/action-gh-release@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: ${{ runner.workspace }}/extract_data/*.zip

    - name: Install Node.js dependencies for artifact upload
      # 在运行 github-script 之前安装所需的 Node.js 模块。
      # @actions/artifact 模块需要被显式安装才能在 github-script 中使用。
      run: npm install @actions/artifact

    - name: Upload each extracted zip file as a separate artifact
      # 此步骤旨在将 'extract_data' 目录中的每个 .zip 文件作为独立的 Artifact 上传。
      # 原生的 actions/upload-artifact@v4 在给定通配符路径时，
      # 会将所有匹配的文件打包成一个 Artifact。
      # 为了实现“每个文件单独上传”的需求，我们使用 actions/github-script
      # 来执行一个 Node.js 脚本，该脚本会遍历所有 .zip 文件并逐一上传。
      uses: actions/github-script@v6 # 使用 actions/github-script 来执行自定义逻辑
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          // const glob = require('glob'); // 用于查找文件，github-script 环境中通常可用
          const { globSync } = require('glob');

          // 获取 GitHub Actions 工具包的客户端，用于上传 Artifact
          const {DefaultArtifactClient} = require('@actions/artifact')
          // const core = require('@actions/core'); // 用于日志输出和错误处理

          // 获取工作区路径
          const workspace = process.env.GITHUB_WORKSPACE;
          // 构建包含 .zip 文件的目录的完整路径
          const extractDirPath = path.join(workspace, '..', 'extract_data');

          // 检查 extract_data 目录是否存在
          if (!fs.existsSync(extractDirPath)) {
            core.warning(`未找到目录: ${extractDirPath}。没有 .zip 文件可供上传。`);
            return; // 如果目录不存在，则退出
          }

          // 查找 extract_data 目录中的所有 .zip 文件
          const zipFiles = globSync(`${extractDirPath}/*.zip`);

          if (zipFiles.length === 0) {
            core.info(`在 ${extractDirPath} 中未找到任何 .zip 文件。`);
            return; // 如果没有找到 .zip 文件，则退出
          }

          core.info(`找到 ${zipFiles.length} 个 .zip 文件，将逐一上传。`);

          // 遍历每个找到的 .zip 文件并单独上传
          for (const filePath of zipFiles) {
            const fileName = path.basename(filePath); // 获取文件名 (例如：my_data.zip)
            // 为每个文件创建一个唯一的 Artifact 名称
            // 例如：extracted-data-my_data.zip
            const artifactName = `[extracted-data] ${fileName}`;

            try {
              core.info(`正在上传 Artifact: ${artifactName}，路径为: ${filePath}`);

              // 调用 artifactClient.uploadArtifact 上传单个文件
              const artifactClient = new DefaultArtifactClient();
              const uploadResponse = await artifactClient.uploadArtifact(
                artifactName,       // Artifact 的名称
                [filePath],         // 要上传的文件路径数组 (这里只包含一个文件)
                path.dirname(filePath), // 文件的根目录，用于在 Artifact 中保持正确的相对路径
                {
                  retentionDays: 5 // 可选：设置 Artifact 的保留天数，与原始注释保持一致
                }
              );
              core.info(`Artifact '${artifactName}' 上传成功: ${uploadResponse.artifactName}`);
            } catch (error) {
              core.error(`上传 Artifact '${artifactName}' 失败: ${error.message}`);
              core.setFailed(`上传 Artifact '${artifactName}' 失败。`);
            }
          }